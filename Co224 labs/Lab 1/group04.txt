@ ARM Assembly - Lab 1
@ E Number : E/16/203
@ Name :  Lakshan S.A.I

	.text 	@ instruction memory
	.global main
main:
	@ stack handling, will discuss later
	@ push (store) lr to the stack
	sub sp, sp, #4
	str lr, [sp, #0]

	@ load values
	ldr r0, =array_a
	ldr r1, =array_b
	mov r2, #3
	mov r3, #7
	mov r4, #10

	
	@ Write YOUR CODE HERE
	@ b[4] = 6 + a[9] - a[3] + b[1] â€“ ( c + d - e )
	@ Base address of a in r0
	@ Base address of b in r1
	@ c,d,e in r2,r3,r4 respectively 

	@ ---------------------

    LDR r5,[r0,#36];   // loading a[9] to register 5
    ADD r5,r5,#6;      // Add 6 to the loaded number
    LDR r6,[r0,#12];   // loading a[3] to reg 6
    SUB r6,r5,r6;      // subtract a[3] from previously added numbers
    LDR r7,[r1,#4];    // load b[1] to reg 7
    ADD r8,r7,r6;      // add b[1] to the number in r6
    SUB r8,r8,r2;      // subtract c from that number
    SUB r8,r8,r3;      // subtract d from that number
    ADD r8,r8,r4;      // add e to that number
    STR r8,[r1,#16];   // store the final value in b[4]
 
 
 
 
 
 
 
 
	

	@ ---------------------
	
	
	@ load aguments and print
	ldr r0, =format
	ldr r2, =array_b
	ldr r1, [r2,#16]
	bl printf

	@ stack handling (pop lr from the stack) and return
	ldr lr, [sp, #0]
	add sp, sp, #4
	mov pc, lr

	
	
	.data	@ data memory
	
format: .asciz "The Answer is %d (Expect -3 if correct)\n"
	
	@array called array_a of size 40 bytes
	.balign 4 			@align to an address of multiple of 4
array_a: .word 1,5,7,67,5,54,65,23,34,54

	@array called array_b of size 20 bytes
	.balign 4 			@align to an address of multiple of 4
array_b: .word 7,4,8,3,5
